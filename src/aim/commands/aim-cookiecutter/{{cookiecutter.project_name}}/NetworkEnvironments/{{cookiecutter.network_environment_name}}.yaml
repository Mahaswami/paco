{% if cookiecutter.starting_template == 'simple-web-app' %}
network:
  title: "{{cookiecutter.network_environment_title}}"
  availability_zones: 2
  enabled: true
  vpc:
    enable_dns_hostnames: true
    enable_dns_support: true
    enable_internet_gateway: true
    nat_gateway:
      {{cookiecutter.application_name}}:
        enabled: true
        availability_zone: 1
        segment: public
        default_route_segments:
          - web
    vpn_gateway:
      {{cookiecutter.application_name}}:
        enabled: false
    private_hosted_zone:
      enabled: false
      name: example.internal
    security_groups:
      {{cookiecutter.application_name}}:
        alb:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - cidr_ip: 0.0.0.0/0
              from_port: 80
              name: HTTP
              protocol: tcp
              to_port: 80
        web:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - from_port: 80
              name: HTTP
              protocol: tcp
              source_security_group_id: netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.alb.id
              to_port: 80
    segments:
      public:
        enabled: true
      web:
        enabled: true

applications:
  {{cookiecutter.application_name}}:
    title: {{cookiecutter.application_title}}
    enabled: true
    managed_updates: true
    groups:
      site:
        type: Application
        order: 1
        resources:
          alb:
            type: LBApplication
            enabled: true
            order: 1
            target_groups:
              {{cookiecutter.application_name}}:
                health_check_interval: 30
                health_check_timeout: 10
                healthy_threshold: 2
                unhealthy_threshold: 2
                port: 80
                protocol: HTTP
                health_check_http_code: 200
                health_check_path: /
                connection_drain_timeout: 300
            listeners:
              - port: 80
                protocol: HTTP
                target_group: {{cookiecutter.application_name}}
            scheme: internet-facing
            security_groups:
              - netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.alb.id
            segment: public
          web:
            type: ASG
            order: 2
            enabled: true
            associate_public_ip_address: false
            cooldown_secs: 300
            ebs_optimized: false
            health_check_grace_period_secs: 300
            health_check_type: ELB
            instance_iam_role:
              enabled: true
            instance_ami: 'ami-0cc293023f983ed53' # latest Amazon Linux 2, June 2019
            instance_key_pair: EC2KEYPAIRNAME-XXX-TODO
            instance_monitoring: false
            instance_type: t2.nano
            max_instances: 2
            min_instances: 1
            desired_capacity: 1
            target_groups:
              - netenv.ref {{cookiecutter.network_environment_name}}.applications.{{cookiecutter.application_name}}.groups.site.resources.alb.target_groups.{{cookiecutter.application_name}}.arn
            security_groups:
              - netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.web.id
            segment: web
            termination_policies:
              - Default
            update_policy_max_batch_size: 1
            update_policy_min_instances_in_service: 0
            user_data_script: |
              #!/bin/bash
              yum update -y
              yum install httpd -y
              echo "<html><body><h1>Hello world!</h1></body></html>" > /var/www/html/index.html
              service httpd start

environments:
  dev:
    title: "Development Environment"
    default:
      applications:
        {{cookiecutter.application_name}}:
          enabled: true
      network:
        aws_account: config.ref accounts.master
        availability_zones: 2
        name: example
        vpc:
          cidr: 10.20.0.0/16
          segments:
            public:
              az1_cidr: 10.20.1.0/24
              az2_cidr: 10.20.2.0/24
              internet_access: true
            web:
              az1_cidr: 10.20.3.0/24
              az2_cidr: 10.20.4.0/24
    {{cookiecutter.aws_default_region}}:
      enabled: true
  prod:
    title: "Production Environment"
    default:
      applications:
        {{cookiecutter.application_name}}:
          enabled: true
          groups:
            site:
              web:
                instance_type: t2.medium
                max_instances: 4
                min_instances: 2
                desired_capacity: 2
      network:
        aws_account: config.ref accounts.master
        availability_zones: 2
        name: example
        vpc:
          cidr: 10.20.0.0/16
          segments:
            public:
              az1_cidr: 10.20.1.0/24
              az2_cidr: 10.20.2.0/24
              internet_access: true
            web:
              az1_cidr: 10.20.3.0/24
              az2_cidr: 10.20.4.0/24
    {{cookiecutter.aws_default_region}}:
      enabled: false
{% endif %}
{%if cookiecutter.starting_template == 'complete-web-app' %}
network:
  title: "{{cookiecutter.network_environment_title}}"
  availability_zones: 2
  enabled: true
  region: {{cookiecutter.aws_default_region}}
  vpc:
    enable_dns_hostnames: true
    enable_dns_support: true
    enable_internet_gateway: true
    nat_gateway:
      {{cookiecutter.application_name}}:
        enabled: true
        availability_zone: 1
        segment: public
        default_route_segments:
          - web
    vpn_gateway:
      {{cookiecutter.application_name}}:
        enabled: false
    private_hosted_zone:
      enabled: false
      name: example.internal
    security_groups:
      {{cookiecutter.application_name}}:
        alb:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - cidr_ip: 0.0.0.0/32
              from_port: 80
              name: HTTP
              protocol: tcp
              to_port: 80
        web:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - from_port: 80
              name: HTTP
              protocol: tcp
              source_security_group_id: netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.alb.id
              to_port: 80
            - from_port: 22
              to_port: 22
              name: SSH
              protocol: tcp
              source_security_group_id: netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.bastion.id
        bastion:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - from_port: 22
              name: SSH
              protocol: tcp
              cidr_ip: 255.255.255.255/32 # XXX ToDo: replace with custom IP(s)
              to_port: 22
    segments:
      public:
        enabled: true
      web:
        enabled: true

applications:
  {{cookiecutter.application_name}}:
    title: {{cookiecutter.application_title}}
    enabled: true
    managed_updates: true
    groups:
      site:
        type: Application
        order: 1
        resources:
          alb:
            type: LBApplication
            enabled: true
            order: 1
            target_groups:
              {{cookiecutter.application_name}}:
                health_check_interval: 30
                health_check_timeout: 10
                healthy_threshold: 2
                unhealthy_threshold: 2
                port: 80
                protocol: HTTP
                health_check_http_code: 200
                health_check_path: /
                connection_drain_timeout: 300
            listeners:
              http:
                port: 80
                protocol: HTTP
                target_group: {{cookiecutter.application_name}}
            scheme: internet-facing
            security_groups:
              - netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.alb.id
            segment: public
          web:
            type: ASG
            order: 2
            enabled: true
            associate_public_ip_address: false
            cooldown_secs: 300
            ebs_optimized: false
            health_check_grace_period_secs: 300
            health_check_type: ELB
            instance_iam_role:
              enabled: true
            instance_ami: function.ref aws.ec2.ami.latest.amazon-linux-2
            instance_key_pair: service.ref ec2.keypairs.aimkeypair
            instance_monitoring: false
            instance_type: t2.nano
            max_instances: 2
            min_instances: 1
            desired_capacity: 1
            target_groups:
              - netenv.ref {{cookiecutter.network_environment_name}}.applications.{{cookiecutter.application_name}}.groups.site.resources.alb.target_groups.{{cookiecutter.application_name}}.arn
            security_groups:
              - netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.web.id
            segment: web
            termination_policies:
              - Default
            update_policy_max_batch_size: 1
            update_policy_min_instances_in_service: 0
            user_data_script: |
              #!/bin/bash
              yum update -y
              yum install httpd -y
              echo "<html><body><h1>Hello world!</h1></body></html>" > /var/www/html/index.html
              service httpd start

      bastion:
        type: Bastion
        order: 2
        resources:
          instance:
            type: ASG
            order: 1
            enabled: true
            associate_public_ip_address: true
            cooldown_secs: 300
            desired_capacity: 1
            ebs_optimized: false
            health_check_grace_period_secs: 300
            health_check_type: EC2
            instance_iam_role:
              enabled: true
            instance_ami: 'ami-0cc293023f983ed53' # latest Amazon Linux 2, June 2019
            instance_key_pair: EC2KEYPAIRNAME-XXX-TODO
            instance_monitoring: false
            instance_type: t2.micro
            max_instances: 2
            min_instances: 1
            segment: public
            termination_policies:
              - Default
            update_policy_max_batch_size: 1
            update_policy_min_instances_in_service: 0
            security_groups:
              - netenv.ref {{cookiecutter.network_environment_name}}.network.vpc.security_groups.{{cookiecutter.application_name}}.bastion.id
            user_data_script: |
              #!/bin/bash
              yum update -y

      cicd:
        type: Deployment
        title: 'CI/CD'
        order: 3
        resources:
          cpbd_s3:
            type: S3Bucket
            enabled: true
            order: 0
            bucket_name: "artifacts"
            deletion_policy: "delete"
            account: config.ref accounts.master
            policy:
              - aws:
                  - aim.sub '${netenv.ref {{cookiecutter.network_environment_name}}.applications.{{cookiecutter.application_name}}.groups.site.resources.web.instance_iam_role.arn}'
                effect: 'Allow'
                action:
                  - 's3:Get*'
                  - 's3:List*'
                resource_suffix:
                  - '/*'
                  - ''
          cpbd:
            type: CodePipeBuildDeploy
            order: 1
            enabled: true
            deployment_environment: "" # Override in environment
            deployment_branch_name: "" # Override in environment
            manual_approval_enabled: false
            manual_approval_notification_email: ""
            codecommit_repository: service.ref codecommit.{{cookiecutter.network_environment_name}}.{{cookiecutter.application_name}}
            asg_name: netenv.ref {{cookiecutter.network_environment_name}}.applications.{{cookiecutter.application_name}}.groups.site.resources.web.name
            auto_rollback_enabled: true
            deploy_config_type: HOST_COUNT
            deploy_style_option: WITH_TRAFFIC_CONTROL
            deploy_config_value: 1
            deploy_instance_role_name: netenv.ref {{cookiecutter.network_environment_name}}.applications.{{cookiecutter.application_name}}.groups.site.resources.web.instance_iam_role.name
            elb_name: ""
            alb_target_group_name: netenv.ref {{cookiecutter.network_environment_name}}.applications.{{cookiecutter.application_name}}.groups.site.resources.alb.target_groups.{{cookiecutter.application_name}}.name
            tools_account: config.ref accounts.master
            cross_account_support: true
            artifacts_bucket: netenv.ref {{cookiecutter.network_environment_name}}.applications.{{cookiecutter.application_name}}.groups.cicd.resources.cpbd_s3

environments:
  dev:
    title: "Development Environment"
    default:
      applications:
        {{cookiecutter.application_name}}:
          enabled: true
          groups:
            cicd:
              resources:
                cpbd:
                  deployment_environment: "dev"
                  deployment_branch_name: "dev"
                  deploy_config_value: 0
      network:
        aws_account: config.ref accounts.master
        availability_zones: 2
        name: example
        vpc:
          cidr: 10.20.0.0/16
          segments:
            public:
              az1_cidr: 10.20.1.0/24
              az2_cidr: 10.20.2.0/24
              internet_access: true
            web:
              az1_cidr: 10.20.3.0/24
              az2_cidr: 10.20.4.0/24
    {{cookiecutter.aws_default_region}}:
      enabled: true

  prod:
    title: "Production Environment"
    default:
      applications:
        {{cookiecutter.application_name}}:
          enabled: true
          groups:
            site:
              web:
                instance_type: t2.medium
                max_instances: 4
                min_instances: 2
                desired_capacity: 2
      network:
        aws_account: config.ref accounts.master
        availability_zones: 2
        name: example
        vpc:
          cidr: 10.20.0.0/16
          segments:
            public:
              az1_cidr: 10.20.1.0/24
              az2_cidr: 10.20.2.0/24
              internet_access: true
            web:
              az1_cidr: 10.20.3.0/24
              az2_cidr: 10.20.4.0/24
    {{cookiecutter.aws_default_region}}:
      enabled: false

{% endif %}

